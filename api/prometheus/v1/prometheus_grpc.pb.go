// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrometheusClient is the client API for Prometheus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrometheusClient interface {
	// Sends query.
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// Sends query.
	BatchQuery(ctx context.Context, in *BatchQueryRequest, opts ...grpc.CallOption) (*BatchQueryResponse, error)
	// Sends query.
	TKMeter(ctx context.Context, in *TKMeterRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// Sends query.
	BatchTKMeter(ctx context.Context, in *TKMeterBatchRequest, opts ...grpc.CallOption) (*BatchQueryResponse, error)
}

type prometheusClient struct {
	cc grpc.ClientConnInterface
}

func NewPrometheusClient(cc grpc.ClientConnInterface) PrometheusClient {
	return &prometheusClient{cc}
}

func (c *prometheusClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/prometheus.v1.Prometheus/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusClient) BatchQuery(ctx context.Context, in *BatchQueryRequest, opts ...grpc.CallOption) (*BatchQueryResponse, error) {
	out := new(BatchQueryResponse)
	err := c.cc.Invoke(ctx, "/prometheus.v1.Prometheus/BatchQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusClient) TKMeter(ctx context.Context, in *TKMeterRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/prometheus.v1.Prometheus/TKMeter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusClient) BatchTKMeter(ctx context.Context, in *TKMeterBatchRequest, opts ...grpc.CallOption) (*BatchQueryResponse, error) {
	out := new(BatchQueryResponse)
	err := c.cc.Invoke(ctx, "/prometheus.v1.Prometheus/BatchTKMeter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrometheusServer is the server API for Prometheus service.
// All implementations must embed UnimplementedPrometheusServer
// for forward compatibility
type PrometheusServer interface {
	// Sends query.
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// Sends query.
	BatchQuery(context.Context, *BatchQueryRequest) (*BatchQueryResponse, error)
	// Sends query.
	TKMeter(context.Context, *TKMeterRequest) (*QueryResponse, error)
	// Sends query.
	BatchTKMeter(context.Context, *TKMeterBatchRequest) (*BatchQueryResponse, error)
	mustEmbedUnimplementedPrometheusServer()
}

// UnimplementedPrometheusServer must be embedded to have forward compatible implementations.
type UnimplementedPrometheusServer struct {
}

func (UnimplementedPrometheusServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedPrometheusServer) BatchQuery(context.Context, *BatchQueryRequest) (*BatchQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQuery not implemented")
}
func (UnimplementedPrometheusServer) TKMeter(context.Context, *TKMeterRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TKMeter not implemented")
}
func (UnimplementedPrometheusServer) BatchTKMeter(context.Context, *TKMeterBatchRequest) (*BatchQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTKMeter not implemented")
}
func (UnimplementedPrometheusServer) mustEmbedUnimplementedPrometheusServer() {}

// UnsafePrometheusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrometheusServer will
// result in compilation errors.
type UnsafePrometheusServer interface {
	mustEmbedUnimplementedPrometheusServer()
}

func RegisterPrometheusServer(s grpc.ServiceRegistrar, srv PrometheusServer) {
	s.RegisterService(&Prometheus_ServiceDesc, srv)
}

func _Prometheus_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prometheus.v1.Prometheus/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prometheus_BatchQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusServer).BatchQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prometheus.v1.Prometheus/BatchQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusServer).BatchQuery(ctx, req.(*BatchQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prometheus_TKMeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TKMeterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusServer).TKMeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prometheus.v1.Prometheus/TKMeter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusServer).TKMeter(ctx, req.(*TKMeterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prometheus_BatchTKMeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TKMeterBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusServer).BatchTKMeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prometheus.v1.Prometheus/BatchTKMeter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusServer).BatchTKMeter(ctx, req.(*TKMeterBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Prometheus_ServiceDesc is the grpc.ServiceDesc for Prometheus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Prometheus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prometheus.v1.Prometheus",
	HandlerType: (*PrometheusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Prometheus_Query_Handler,
		},
		{
			MethodName: "BatchQuery",
			Handler:    _Prometheus_BatchQuery_Handler,
		},
		{
			MethodName: "TKMeter",
			Handler:    _Prometheus_TKMeter_Handler,
		},
		{
			MethodName: "BatchTKMeter",
			Handler:    _Prometheus_BatchTKMeter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/prometheus/v1/prometheus.proto",
}
